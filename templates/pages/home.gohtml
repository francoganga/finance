{{define "content"}}
    {{- if not (eq .HTMX.Request.Target "posts")}}
        {{template "top-content" .}}
    {{- end}}

    {{template "posts" .}}

    {{- if not (eq .HTMX.Request.Target "posts")}}
        {{template "file-msg" .}}
    {{- end}}
    <script>

        fetch("/asd").then(r => r.json()).then(data => {
            if (!data.length) return
            console.log({data})
            let opts = {}
            opts.headings = Object.keys(data[0])
            opts.data = data.map(item => {
                let values = []


                for (const [key, value] of Object.entries(item)) {
                    if (key == "Balance" || key == "Amount") {
                        let intVal = +value
                        intVal /= 100

                        values.push("$ ".concat(intVal))
                        continue
                    }
                    values.push(value)
                }

                console.log({values})
                return values
                
            })

            console.log({opts})

            const dt = new window.simpleDatatables.DataTable(".table", {data: opts})
        })

    </script>
{{end}}

{{define "top-content"}}
    <section class="hero is-info welcome is-small">
        <div class="hero-body">
            <div class="container">
                <h1 class="title">
                    Hello{{if .IsAuth}}, {{.AuthUser.Name}}{{end}}
                </h1>
                <h2 class="subtitle">{{if .IsAuth}}Welcome back!{{else}}Please login in to your account.{{end}}</h2>
            </div>
        </div>
    </section>

    <section class="section">
        <h1 class="title">Recent posts</h1>
        <h2 class="subtitle">
            Below is an example of both paging and AJAX fetching using HTMX
        </h2>
    </section>
{{end}}

{{define "posts"}}
    <div id="posts">
        <table class="table"></table>
    </div>
{{end}}

{{define "file-msg"}}
    <div class="block"></div>
    <article class="message is-small is-warning" x-data="{show: true}" x-show="show">
        <div class="message-header">
            <p>Serving files</p>
            <button class="delete is-small" aria-label="delete" @click="show = false"></button>
        </div>
        <div class="message-body">
            In the example posts above, check how the file URL contains a cache-buster query parameter which changes only when the app is restarted.
            Static files also contain cache-control headers which are configured via middleware.
            You can also use AlpineJS to dismiss this message.
        </div>
    </article>
{{end}}
